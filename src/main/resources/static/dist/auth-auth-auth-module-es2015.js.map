{"version":3,"sources":["webpack:///./src/app/auth/auth/login/login.component.html","webpack:///./src/app/auth/auth/auth-routing.module.ts","webpack:///./src/app/auth/auth/auth.module.ts","webpack:///./src/app/auth/auth/login/login.component.scss","webpack:///./src/app/auth/auth/login/login.component.ts","webpack:///./src/app/service/core2.ts","webpack:///./src/app/service/jwt.interceptor.service.ts"],"names":[],"mappings":"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","file":"auth-auth-auth-module-es2015.js","sourcesContent":["module.exports = \"<h1 id=\\\"title\\\" class=\\\"title\\\">Đăng nhập</h1>\\r\\n<p class=\\\"sub-title\\\">Xin chào! Hãy đăng nhập để tiếp tục.</p>\\r\\n\\r\\n<nb-alert *ngIf=\\\"showMessages.error && errors?.length && !submitted\\\" outline=\\\"danger\\\" role=\\\"alert\\\">\\r\\n  <p class=\\\"alert-title\\\"><b>Oh snap!</b></p>\\r\\n  <ul class=\\\"alert-message-list\\\">\\r\\n    <li *ngFor=\\\"let error of errors\\\" class=\\\"alert-message\\\">{{ error }}</li>\\r\\n  </ul>\\r\\n</nb-alert>\\r\\n\\r\\n<nb-alert *ngIf=\\\"showMessages.success && messages?.length && !submitted\\\" outline=\\\"success\\\" role=\\\"alert\\\">\\r\\n  <p class=\\\"alert-title\\\"><b>Hooray!</b></p>\\r\\n  <ul class=\\\"alert-message-list\\\">\\r\\n    <li *ngFor=\\\"let message of messages\\\" class=\\\"alert-message\\\">{{ message }}</li>\\r\\n  </ul>\\r\\n</nb-alert>\\r\\n\\r\\n<form (ngSubmit)=\\\"login()\\\" #form=\\\"ngForm\\\" aria-labelledby=\\\"title\\\">\\r\\n\\r\\n  <div class=\\\"form-control-group\\\">\\r\\n    <label class=\\\"label\\\" for=\\\"username\\\">Tài khoản:</label>\\r\\n    <input type=\\\"text\\\"\\r\\n     nbInput \\r\\n     placeholder=\\\"Tài khoản\\\" \\r\\n     style=\\\"width:100%\\\" \\r\\n     [(ngModel)]=\\\"user.username\\\"\\r\\n     name=\\\"username\\\" \\r\\n     id=\\\"username\\\"\\r\\n     fullWidth\\r\\n     autofocus\\r\\n     >\\r\\n\\r\\n  </div>\\r\\n\\r\\n  <div class=\\\"form-control-group\\\">\\r\\n    <label class=\\\"label\\\" for=\\\"input-password\\\">Mật khẩu:</label>\\r\\n    <input nbInput\\r\\n           fullWidth\\r\\n           [(ngModel)]=\\\"user.password\\\"\\r\\n           #password=\\\"ngModel\\\"\\r\\n           name=\\\"password\\\"\\r\\n           type=\\\"password\\\"\\r\\n           id=\\\"input-password\\\"\\r\\n           placeholder=\\\"Password\\\"\\r\\n           [status]=\\\"password.dirty ? (password.invalid  ? 'danger' : 'success') : ''\\\"\\r\\n           [required]=\\\"getConfigValue('forms.validation.password.required')\\\"\\r\\n           [minlength]=\\\"getConfigValue('forms.validation.password.minLength')\\\"\\r\\n           [maxlength]=\\\"getConfigValue('forms.validation.password.maxLength')\\\"\\r\\n           [attr.aria-invalid]=\\\"password.invalid && password.touched ? true : null\\\">\\r\\n    <ng-container *ngIf=\\\"password.invalid && password.touched \\\">\\r\\n      <p class=\\\"error-message\\\" *ngIf=\\\"password.errors?.required\\\">\\r\\n        Chưa nhập mật khẩu!\\r\\n      </p>\\r\\n      <p class=\\\"error-message\\\" *ngIf=\\\"password.errors?.minlength || password.errors?.maxlength\\\">\\r\\n        Mật khẩu phải\\r\\n        từ {{ getConfigValue('forms.validation.password.minLength') }}\\r\\n        tới {{ getConfigValue('forms.validation.password.maxLength') }}\\r\\n        kí tự\\r\\n      </p>\\r\\n    </ng-container>\\r\\n  </div>\\r\\n\\r\\n  <div class=\\\"form-control-group accept-group\\\">\\r\\n    <nb-checkbox name=\\\"rememberMe\\\" [(ngModel)]=\\\"user.rememberMe\\\" *ngIf=\\\"rememberMe\\\">Nhớ tài khoản</nb-checkbox>\\r\\n    <a class=\\\"forgot-password\\\" routerLink=\\\"../request-password\\\">Quên mật khẩu!</a>\\r\\n  </div>\\r\\n\\r\\n  <button nbButton\\r\\n          fullWidth\\r\\n          status=\\\"success\\\"\\r\\n          [disabled]=\\\"submitted || !form.valid\\\"\\r\\n          [class.btn-pulse]=\\\"submitted\\\">\\r\\n    Đăng nhập\\r\\n  </button>\\r\\n</form>\\r\\n\\r\\n\\r\\n<!-- <section class=\\\"another-action\\\" aria-label=\\\"Register\\\">\\r\\n  Nếu bạn chưa có tài khoản? <a class=\\\"text-link\\\" routerLink=\\\"../register\\\">Kế</a>\\r\\n</section> -->\"","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { NbAuthComponent } from '@nebular/auth';\r\nimport { LoginComponent } from './login/login.component';\r\n\r\nexport const routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: NbAuthComponent,  // <---\r\n    children: [\r\n      {\r\n        path: 'login',\r\n        component: LoginComponent, // <---\r\n      },\r\n    ],\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class AuthModuleRouting{\r\n\r\n}","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { RouterModule } from '@angular/router';\r\nimport { NbAlertModule, NbInputModule, NbButtonModule, NbCheckboxModule } from '@nebular/theme';\r\nimport { NbAuthModule } from '@nebular/auth';\r\nimport { AuthModuleRouting } from './auth-routing.module';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { AuthService } from '../../service/auth-service.service';\r\nimport { MyCoreModule } from '../../service/core2';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    RouterModule,\r\n    NbAlertModule,\r\n    NbInputModule,\r\n    NbButtonModule,\r\n    NbCheckboxModule,\r\n    AuthModuleRouting,\r\n\r\n    NbAuthModule,\r\n    MyCoreModule,\r\n  ],\r\n  declarations: [\r\n  LoginComponent],\r\n  providers:[AuthService]\r\n})\r\nexport class AuthModule { }\r\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2F1dGgvYXV0aC9sb2dpbi9sb2dpbi5jb21wb25lbnQuc2NzcyJ9 */\"","import { Component, OnInit, ChangeDetectorRef, Inject } from '@angular/core';\r\nimport { NbLoginComponent, NbAuthService, NB_AUTH_OPTIONS } from '@nebular/auth';\r\nimport { Router } from '@angular/router';\r\nimport { AuthService } from '../../../service/auth-service.service';\r\nimport { TokenStorageService } from '../../../service/tokenstorage.service';\r\nimport { CustomerControllerService } from '../../../../typescript-angular-client';\r\nimport { Logger } from '../../../log.service';\r\n\r\n@Component({\r\n  selector: 'ngx-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss'],\r\n  providers:[AuthService,CustomerControllerService]\r\n})\r\nexport class LoginComponent  extends NbLoginComponent  implements OnInit {\r\n  isLoggedIn = false;\r\n  isLoginFailed = false;\r\n  roles: string[] = [];\r\n  constructor(\r\n    private log:Logger,\r\n    private customerControllerService: CustomerControllerService,\r\n    private authService:AuthService, private tokenStorageService:TokenStorageService,\r\n    private nbAuthServe:NbAuthService,@Inject(NB_AUTH_OPTIONS) options:{},cd: ChangeDetectorRef, router: Router){\r\n    super(nbAuthServe,options,cd,router);\r\n    \r\n  }\r\n  login(){\r\n    this.log.log(this.user);\r\n    let loginTrue = this.authService.login(this.user);\r\n    this.log.logAny(loginTrue);\r\n    this.router.navigate([\"/store\"]);\r\n\r\n  }\r\n  ngOnInit() {\r\n    if(this.authService.isAuthenticated()){\r\n      this.isLoggedIn=true;\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\r\nimport { JwtInterceptorService } from './jwt.interceptor.service';\r\n\r\n@NgModule({\r\n    imports: [\r\n      CommonModule,\r\n      HttpClientModule\r\n    ],\r\n    declarations: [],\r\n    providers: [\r\n      {\r\n        provide: HTTP_INTERCEPTORS,\r\n        useClass: JwtInterceptorService,\r\n        multi: true,\r\n      },JwtInterceptorService\r\n    ]\r\n  })\r\nexport class MyCoreModule{}","import { Injectable } from '@angular/core';\r\nimport { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent, HTTP_INTERCEPTORS, HttpResponse, HttpErrorResponse } from '@angular/common/http';\r\nimport { Observable, of } from 'rxjs';\r\nimport { TokenStorageService } from './tokenstorage.service';\r\nimport { NbAuthJWTInterceptor } from '@nebular/auth';\r\nimport { map, catchError } from 'rxjs/operators';\r\nimport { Logger } from '../log.service';\r\nimport { Router } from '@angular/router';\r\nimport { ToastrService } from '../pages/sharedmodule/toast';\r\nconst TOKEN_HEADER_KEY = 'Authorization';\r\nconst CONTENTTYPE = 'Content-Type';\r\nconst ACCEPT = 'Accept';\r\nconst APPJSON = 'application/json';\r\n@Injectable({ providedIn: 'root' })\r\nexport class JwtInterceptorService implements HttpInterceptor {\r\n\r\n  constructor(\r\n    private token: TokenStorageService, \r\n    private log: Logger,\r\n    private router:Router,\r\n    private toast:ToastrService) { }\r\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n    const token = this.token.getToken();\r\n    if (!req.headers.has(CONTENTTYPE)) {\r\n      req = req.clone({ setHeaders: { 'Content-Type': 'application/json' } })\r\n    }\r\n    if (!req.headers.has(ACCEPT)) {\r\n      req = req.clone({ setHeaders: { 'Accept': 'application/json' } })\r\n    }\r\n    if (token !== null) {\r\n      req = req.clone({ setHeaders: { 'Authorization': 'Bearer ' + token } })\r\n    }\r\n    return next.handle(req).pipe(\r\n      catchError(error => {\r\n        if (error instanceof HttpErrorResponse) {\r\n          switch (error.status) {\r\n            case 400:\r\n              console.log(400);\r\n              return Observable.throw(error);\r\n            case 401:\r\n              console.log(401);\r\n              this.token.clear();\r\n              this.router.navigate(['auth/login']);\r\n              return Observable.throw(error);\r\n            case 403:\r\n              console.log(403);\r\n              this.toast.notify(4,\"Quyền\",\"Bạn không có quyền truy cập.\");\r\n              return Observable.throw(error);\r\n            case 500:\r\n              this.toast.notify(4,\"Lỗi\",error.error.message);\r\n          }\r\n        }else{\r\n\r\n        }\r\n      })\r\n    );\r\n  }\r\n  /**\r\n   * manage errors\r\n   * @param err\r\n   * @returns {any}\r\n   */\r\n  private handleAuthError(err: HttpErrorResponse): Observable<any> {\r\n    //handle your auth error or rethrow\r\n    if (err.status === 401) {\r\n        //navigate /delete cookies or whatever\r\n        console.log('handled error ' + err.status);\r\n        this.router.navigate(['auth/login']);\r\n        // if you've caught / handled the error, you don't want to rethrow it unless you also want downstream consumers to have to handle it as well.\r\n        return of(err.message);\r\n    }\r\n    throw err;\r\n}\r\n\r\n\r\n\r\n}\r\nexport const authInterceptorProviders = [\r\n  { provide: HTTP_INTERCEPTORS, useClass: JwtInterceptorService, multi: true }\r\n];\r\n"],"sourceRoot":""}